#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from passage import PassageService
from passage.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bool putObject(Strategy strategy, SObject sObj)')
    print('  SObject getObject(Strategy strategy, string key)')
    print('   listObject(Strategy strategy,  key)')
    print('  bool deleteObject(Strategy strategy, string key)')
    print('  bool isObjectInBucket(Strategy strategy, string key)')
    print('  bool createImg(Strategy strategy, string key, string convertedKey)')
    print('  bool moveObject(Strategy strategy, string sourceKey, string targetKey)')
    print('   listKeys(Strategy strategy, string prefix)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi+1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi+1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = PassageService.Client(protocol)
transport.open()

if cmd == 'putObject':
    if len(args) != 2:
        print('putObject requires 2 args')
        sys.exit(1)
    pp.pprint(client.putObject(eval(args[0]),eval(args[1]),))

elif cmd == 'getObject':
    if len(args) != 2:
        print('getObject requires 2 args')
        sys.exit(1)
    pp.pprint(client.getObject(eval(args[0]),args[1],))

elif cmd == 'listObject':
    if len(args) != 2:
        print('listObject requires 2 args')
        sys.exit(1)
    pp.pprint(client.listObject(eval(args[0]),eval(args[1]),))

elif cmd == 'deleteObject':
    if len(args) != 2:
        print('deleteObject requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteObject(eval(args[0]),args[1],))

elif cmd == 'isObjectInBucket':
    if len(args) != 2:
        print('isObjectInBucket requires 2 args')
        sys.exit(1)
    pp.pprint(client.isObjectInBucket(eval(args[0]),args[1],))

elif cmd == 'createImg':
    if len(args) != 3:
        print('createImg requires 3 args')
        sys.exit(1)
    pp.pprint(client.createImg(eval(args[0]),args[1],args[2],))

elif cmd == 'moveObject':
    if len(args) != 3:
        print('moveObject requires 3 args')
        sys.exit(1)
    pp.pprint(client.moveObject(eval(args[0]),args[1],args[2],))

elif cmd == 'listKeys':
    if len(args) != 2:
        print('listKeys requires 2 args')
        sys.exit(1)
    pp.pprint(client.listKeys(eval(args[0]),args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
